#!/bin/sh
set -eu

SCRIPTS_PATH="$(realpath "$0")"
SCRIPTS_PATH="${SCRIPTS_PATH%/*}/../.."
SCRIPTS_PATH="$(realpath "${SCRIPTS_PATH}")"
. "${SCRIPTS_PATH}/xparse/xparse.sh"

_FS="$(printf "\034")"
CSV_SEP="|"

# args: FILE
# output: TAGS
get_file_tags() { # {{{
    local FILE="${1}"

    ffprobe -hide_banner -of 'compact=s='"${CSV_SEP}"':nk=0:e=c:p=0' "$1" -show_streams -show_format 2>/dev/null \
        | sed 's/\([^\\]\)'"${CSV_SEP}"'/\1\n/g' \
        | sed -e 's/\\\(.\)/\x00\1/g' \
              -e 's/\x00'"${CSV_SEP}/${CSV_SEP}/g" \
              -e 's/\x00/\\/g' \
              -e '/^tag:/!d' \
              -e 's/^tag://'
} # }}}

# args: STR
# output: UNESCAPED_STR
unescape_csv() { # {{{
    local DATA="${1}"

    # c   Perform C-like escaping. Strings containing a newline (\n),
    #     carriage return (\r), a tab (\t), a form feed (\f), the
    #     escaping character (\) or the item separator character SEP are
    #     escaped using C-like fashioned escaping, so that a newline is
    #     converted to the sequence \n, a carriage return to \r, \ to \\
    #     and the separator SEP is converted to \SEP.
    printf "%s\n" "${DATA}" | \
        sed -e 's/\\\(.\)/\x00\1/g' \
            -e 's/\x00n/\n/g' \
            -e 's/\x00r/\r/g' \
            -e 's/\x00t/\t/g' \
            -e 's/\x00f/\f/g' \
            -e 's/\x00\\/\\/g'
} # }}}

# args: TAGS
# output: KEYS_LIST
get_tags_keys() { # {{{
    local TAGS="${1}"

    printf "%s\n" "${TAGS}" | \
        sed 's/=.*//' | sort
} # }}}

# args: TAGS KEY
# output: KEY_VALUE
get_tag_value() { # {{{
    local TAGS="${1}"
    local KEY="${2}"

    # Escape KEY (BRE Special Characters)
    KEY="$(printf "%s" "${KEY}" | \
        sed -e 's/\\/\\\\/g' \
            -e 's/\./\\./g' \
            -e 's/\[/\\[/g' \
            -e 's/\*/\\*/g' \
            -e 's/\^/\\^/g' \
            -e 's/\$/\\$/g')"

    printf "%s\n" "${TAGS}" | \
        grep -E "^${KEY}=" | sed "s/^[^=]\+=//"
} # }}}

FILE=""
do_file() { # {{{
    FILE="${1}"
    [ -e "${FILE}" ] || { printf "[E]: File \"%s\" doesn't exist!\n" "${FILE}" >&2; exit 1; }
} # }}}

do_tags_keys() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    get_tags_keys "$(get_file_tags "${FILE}")"
    exit 0
} # }}}

do_tags() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        printf "%s=%s\n" \
            "${TAG_NAME}" \
            "$(unescape_csv "$(get_tag_value "${TAGS}" "${TAG_NAME}")")"
    done

    unset IFS
    exit 0
} # }}}

do_tags_esc() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        printf "%s=%s\n" \
            "${TAG_NAME}" \
            "$(get_tag_value "${TAGS}" "${TAG_NAME}")"
    done

    unset IFS
    exit 0
} # }}}

do_tag() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        { printf "%s" "${TAG_NAME}" | grep -Fx -i "${1}" >/dev/null; } && {
            unescape_csv "$(get_tag_value "${TAGS}" "${TAG_NAME}")"
            exit 0
        }
    done

    unset IFS
    exit 1
} # }}}

do_tag_esc() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        { printf "%s" "${TAG_NAME}" | grep -Fx -i "${1}" >/dev/null; } && {
            get_tag_value "${TAGS}" "${TAG_NAME}"
            exit 0
        }
    done

    unset IFS
    exit 1
} # }}}

xparse_add_option "file"      1 do_file

xparse_add_option "tags_keys" 0 do_tags_keys
xparse_add_option "tags"      0 do_tags
xparse_add_option "tags_esc"  0 do_tags_esc

xparse_add_option "tag"     1 do_tag
xparse_add_option "tag_esc" 1 do_tag_esc

xparse_execute_args "$@"

[ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
do_tags
