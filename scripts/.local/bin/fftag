#!/bin/sh
set -eu

SCRIPTS_PATH="$(realpath "$0")"
SCRIPTS_PATH="${SCRIPTS_PATH%/*}/../.."
SCRIPTS_PATH="$(realpath "${SCRIPTS_PATH}")"
. "${SCRIPTS_PATH}/xparse/xparse.sh"

_FS="$(printf "\034")"

# args:   FILE
# return: TAGS_OBJ
get_file_tags() { # {{{
    local FILE="${1}"

    local DATA
    DATA="$(ffprobe \
        -hide_banner \
        -print_format json \
        -show_entries 'stream_tags:format_tags' \
        "${FILE}" 2>/dev/null)" || {
            printf "[E]: ffprobe failed!\n" >&2
            exit 1
        }

    printf "%s\n" "${DATA}" | \
        jq '{ stream: (.streams[0].tags), format: (.format.tags) }'
} # }}}

# args:   TAGS_OBJ
# return: KEYS
get_tags_keys() { # {{{
    local TAGS="${1}"

    printf "%s" "${TAGS}" | \
        jq -r '(if .format == null then empty else (.format | keys)[] end),
               (if .stream == null then empty else (.stream | keys)[] end)' | 
                    sort | uniq
} # }}}

# args:   TAGS_OBJ KEY_NAME
# return: KEY_VALUE
get_tag_value() { # {{{
    local TAGS="${1}"
    local  KEY="${2}"

    # Get format key or stream key if null
    printf "%s\n" "${TAGS}" | \
        jq "[ (.format[\"${KEY}\"]), (.stream[\"${KEY}\"]) ] | (if (.[0] != null) then .[0] else .[1] end)"
} # }}}

FILE=""
do_file() { # {{{
    FILE="${1}"
    [ -e "${FILE}" ] || { printf "[E]: File \"%s\" doesn't exist!\n" "${FILE}" >&2; exit 1; }
} # }}}

do_tags_keys() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    get_tags_keys "$(get_file_tags "${FILE}")"
    exit 0
} # }}}

do_tags() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        printf "%s=%s\n" "${TAG_NAME}" "$(get_tag_value "${TAGS}" "${TAG_NAME}" | jq -r)"
    done

    unset IFS
    exit 0
} # }}}

do_tags_esc() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        printf "%s=%s\n" "${TAG_NAME}" "$(get_tag_value "${TAGS}" "${TAG_NAME}")"
    done

    unset IFS
    exit 0
} # }}}

do_tag() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        { printf "%s" "${TAG_NAME}" | grep -Fx -i "${1}" >/dev/null; } && {
            get_tag_value "${TAGS}" "${TAG_NAME}" | jq -r
            exit 0
        }
    done

    unset IFS
    exit 1
} # }}}

do_tag_esc() { # {{{
    [ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
    local TAGS="$(get_file_tags "${FILE}")"

    IFS="$(printf "\nx")"
    IFS="${IFS%x}"

    local TAG_NAME
    for TAG_NAME in $(get_tags_keys "${TAGS}"); do
        { printf "%s" "${TAG_NAME}" | grep -Fx -i "${1}" >/dev/null; } && {
            get_tag_value "${TAGS}" "${TAG_NAME}"
            exit 0
        }
    done

    unset IFS
    exit 1
} # }}}

xparse_add_option "file"      1 do_file

xparse_add_option "tags_keys" 0 do_tags_keys
xparse_add_option "tags"      0 do_tags
xparse_add_option "tags_esc"  0 do_tags_esc

xparse_add_option "tag"     1 do_tag
xparse_add_option "tag_esc" 1 do_tag_esc

xparse_execute_args "$@"

[ -n "${FILE}" ] || { printf "[E]: No file provided!\n" >&2; exit 1; }
do_tags
