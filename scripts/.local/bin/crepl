#!/usr/bin/luajit
-- vim: ft=lua sw=4 ts=4 et

local stdout = io.output()
local stderr = io.open("/proc/self/fd/2", "w")
local stdin  = io.input()
assert(stderr ~= nil)

PROG   = nil
TARGET = nil

COMMANDS = {}
DESCRIPTIONS = {}

-- iscmd(cmd: string) -> bool
local function iscmd(cmd)
    -- {{{
    local ret = os.execute("command -v \"" .. cmd .. "\" >/dev/null 2>&1")
    return (ret == 0)
end -- }}}

-- has_key(t: table, k: string) -> bool
local function has_key(t, key)
    -- {{{
    for k, _ in pairs(t) do
        if k == key then
            return true
        end
    end

    return false
end -- }}}

-- reset() -> nil
local function reset()
    -- {{{
    PROG = {
        headers     = {
            "#include <stdlib.h>",
            "#include <stdio.h>",
        },
        definitions = {},
        main        = {},
    }

    TARGET = "main"
end -- }}}

-- generate() -> table
local function generate()
    -- {{{
    local ret = {}

    for _, line in ipairs(PROG.headers)     do table.insert(ret, line) end
    table.insert(ret, "")
    for _, line in ipairs(PROG.definitions) do table.insert(ret, line) end
    table.insert(ret, "")

    table.insert(ret, "int main(int argc, char *argv[]) {")
    for _, line in ipairs(PROG.main) do table.insert(ret, line) end
    table.insert(ret, "return 0;")
    table.insert(ret, "}")

    return ret
end -- }}}

-- run() -> nil
local function run()
    -- {{{
    assert(CC ~= nil)
    local lines = generate()

    local name = os.tmpname()
    local f = io.open(name, "w")
    assert(f ~= nil)

    for _, line in ipairs(lines) do
        f:write(line .. "\n")
    end
    f:close()

    -- Compile
    local ret = os.execute(CC .. " " .. CFLAGS .. " -xc " .. name .. " -o " .. os.getenv("HOME") .. "/.crepl")

    if ret ~= 0 then
        stderr:write("[E]: Compilation error!\n")
    else
        os.execute(os.getenv("HOME") .. "/.crepl")
        os.remove(os.getenv("HOME") .. "/.crepl")
    end

    os.remove(name)
end -- }}}

-- pprint() -> nil
local function pprint()
    -- {{{
    local prog_src_name = os.tmpname()

    -- Try format
    if iscmd("clang-format") then
        local clang_fmt = io.popen("clang-format --style=\"file:${HOME}/clang-format.yaml\" >\"" .. prog_src_name .. "\"", "w")
        assert(clang_fmt ~= nil)

        for _, l in ipairs(generate()) do
            clang_fmt:write(l .. "\n")
        end

        clang_fmt:close()
    else
        local prog_src = io.open(prog_src_name, "w")
        assert(prog_src ~= nil)

        for _, l in ipairs(generate()) do
            prog_src:write(l .. "\n")
        end

        prog_src:close()
    end

    -- Try bat, else just cat
    if iscmd("bat") then
        os.execute("bat -lc --style=plain <\"" .. prog_src_name .. "\"")
    else
        os.execute("cat <\"" .. prog_src_name .. "\"")
    end

    os.remove(prog_src_name)
end -- }}}

-- print_bufs() -> nil
local function print_bufs()
    -- {{{
    local function print_buf(buf)
        -- {{{
        local cat_n = io.popen("cat -n", "w")
        assert(cat_n ~= nil)

        for _, l in ipairs(buf) do
            cat_n:write(l .. "\n")
        end

        cat_n:close()
    end -- }}}

    print("// Headers")
    print_buf(PROG.headers)

    print("// Definitions")
    print_buf(PROG.definitions)

    print("// Main")
    print_buf(PROG.main)
end -- }}}

-- sed_edit() -> nil
local function sed_edit()
    -- {{{
    stdout:write("sed> ")
    stdout:flush()
    local line = stdin:read()
    if line == nil then
        return
    end

    local name = os.tmpname()
    local f = io.open(name, "w")
    assert(f ~= nil)

    for _, l in ipairs(PROG[TARGET]) do
        f:write(l .. "\n")
    end
    f:close()

    line = string.gsub(line, "'", "'\\''")
    local sed_f = io.popen("sed -e '" .. line .. "' <\"" .. name .. "\" ; printf '%s\n' \"$?\"", "r")
    if sed_f == nil then os.remove(name) end
    assert(sed_f ~= nil)

    local new_buf = {}
    for l in sed_f:lines() do
        table.insert(new_buf, l)
    end
    sed_f:close()
    os.remove(name)

    local status = table.remove(new_buf)
    if status == "0" then
        PROG[TARGET] = new_buf
    else
        stderr:write("[I]: Buffer not modified\n")
    end
end -- }}}

-- help() -> nil
local function help()
    -- {{{
    for cmd, desc in pairs(DESCRIPTIONS) do
        print("." .. cmd .. " - " .. desc)
    end
end -- }}}

CC = nil
CFLAGS = "-Wall -Wextra -Wno-unused-parameter -std=c99"

if     iscmd("clang") then CC = "clang"
elseif iscmd("gcc")   then CC = "gcc"
elseif iscmd("cc")    then CC = "cc"
else
    stderr:write("[E]: No C compiler found!\n")
    os.exit(1)
end

DESCRIPTIONS["quit"] = "Exit crepl"
COMMANDS["quit"] = function() os.exit(0) end
COMMANDS["q"] = COMMANDS["quit"]

DESCRIPTIONS["headers"] = "Switch to the top of the file"
COMMANDS["headers"] = function() TARGET = "headers" end
COMMANDS["head"] = COMMANDS["headers"]
COMMANDS["h"] = COMMANDS["headers"]

DESCRIPTIONS["definitions"] = "Switch to before main"
COMMANDS["definitions"] = function() TARGET = "definitions" end
COMMANDS["def"]  = COMMANDS["definitions"]
COMMANDS["d"] = COMMANDS["definitions"]

DESCRIPTIONS["main"] = "Switch to inside main"
COMMANDS["main"] = function() TARGET = "main" end
COMMANDS["m"] = COMMANDS["main"]

DESCRIPTIONS["reset"] = "Reset buffer to initial state"
COMMANDS["reset"] = reset
COMMANDS["c"] = COMMANDS["reset"] -- clear

DESCRIPTIONS["run"] = "Compile and run thn program"
COMMANDS["run"] = run
COMMANDS["r"] = COMMANDS["run"]

DESCRIPTIONS["print"] = "Print the buffer"
COMMANDS["print"] = pprint
COMMANDS["p"] = COMMANDS["print"]

DESCRIPTIONS["help"] = "Print this help"
COMMANDS["help"] = help
COMMANDS["h"] = COMMANDS["help"]

DESCRIPTIONS["bprint"] = "Print buffers' contents"
COMMANDS["bprint"] = print_bufs
COMMANDS["bp"] = COMMANDS["bprint"]

DESCRIPTIONS["selected"] = "Print selected buffer"
COMMANDS["selected"] = function() print(TARGET) end
COMMANDS["sel"] = COMMANDS["selected"]
COMMANDS["s"] = COMMANDS["sel"]

DESCRIPTIONS["sed"] = "Modify a buffer with sed"
COMMANDS["sed"] = sed_edit

reset()

while true do
    -- Prompt
    stdout:write("> ")
    stdout:flush()
    local line = stdin:read()
    if line == nil then
        print()
        break
    end

    -- Handle commands
    if string.sub(line, 1, 1) == "." then
        local cmd = string.sub(line, 2)

        if string.sub(line, 1, 2) == ".." then
            table.insert(PROG[TARGET], string.sub(line, 2))

        elseif has_key(COMMANDS, cmd) then
            COMMANDS[cmd]()

        else
            stderr:write("[E]: Unknown command: " .. cmd .. "\n")
        end
    else
        table.insert(PROG[TARGET], line)
    end

    stdout:flush()
    stderr:flush()
end
